name: .NET CI/CD

# Controla quando o workflow será executado
on:
  # Dispara no push para a branch 'main'
  push:
    branches: [ "master" ]
  # Dispara na abertura de Pull Request para a branch 'main'
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:
    name: Build, Test and Publish
    runs-on: ubuntu-latest # Usaremos uma máquina virtual Linux do GitHub

    steps:
    # 1. Baixar o código do seu repositório para a máquina virtual
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- INÍCIO DA FASE DE CI ---

    # 2. Configurar o ambiente .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0' # IMPORTANTE: Mude para a sua versão do .NET se for diferente

    # 3. Restaurar as dependências do projeto
    - name: Restore dependencies
      run: dotnet restore ./src/WebAppDockerTeste/WebAppDockerTeste.csproj # AJUSTAR o caminho se necessário

    # 4. Compilar o projeto
    - name: Build
      run: dotnet build ./src/WebAppDockerTeste/WebAppDockerTeste.csproj --no-restore # AJUSTAR o caminho se necessário

      # --- INÍCIO DA FASE DE CD ---

    # 6. Login no GitHub Container Registry
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # 7. Construir e publicar a imagem Docker
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: . # Contexto é a raiz do repo
        file: ./src/WebAppDockerTeste/Dockerfile # Caminho para seu Dockerfile
        push: true
        tags: ghcr.io/${{ github.repository | toLower }}:${{ github.sha }}
